// <auto-generated />
using System;
using FFM.DataAccess.App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FFM.DataAccess.Migrations
{
    [DbContext(typeof(FFM_DbContext))]
    partial class FFM_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FFM.DataAccessModels.App.customerParts", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<byte[]>("changeKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("changeKey");

                    b.Property<string>("createdByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("createdByIp");

                    b.Property<Guid>("createdByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdByUserId");

                    b.Property<DateTime>("createdOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdOnDate");

                    b.Property<Guid>("customerPartsHeaderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("userfriendlyName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("userfriendlyName");

                    b.HasKey("id");

                    b.HasIndex("createdOnDate");

                    b.HasIndex("customerPartsHeaderId");

                    b.HasIndex("userfriendlyName");

                    b.ToTable("customerParts");

                    b.HasData(
                        new
                        {
                            id = new Guid("bf4349a0-2cba-4646-baa7-0bafeeba9f8c"),
                            createdByIp = "",
                            createdByUserId = new Guid("31a1793a-9453-48cd-9909-7c157dae6a8a"),
                            createdOnDate = new DateTime(2018, 12, 17, 9, 32, 20, 426, DateTimeKind.Unspecified),
                            customerPartsHeaderId = new Guid("596efbff-8c30-4b75-bfdb-ef7e05b5f96d"),
                            description = "desc 1",
                            name = "name 1",
                            userfriendlyName = "Part Revision 1"
                        },
                        new
                        {
                            id = new Guid("d13195c6-2d9e-46b0-b633-aa9e074ea15f"),
                            createdByIp = "",
                            createdByUserId = new Guid("31a1793a-9453-48cd-9909-7c157dae6a8a"),
                            createdOnDate = new DateTime(2019, 6, 17, 9, 32, 20, 426, DateTimeKind.Unspecified),
                            customerPartsHeaderId = new Guid("596efbff-8c30-4b75-bfdb-ef7e05b5f96d"),
                            description = "New Description",
                            name = "Name Changed",
                            userfriendlyName = "Part Revision 2"
                        });
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.customerPartsHeader", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("approvedRejectedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedByIp");

                    b.Property<Guid?>("approvedRejectedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedByUserId");

                    b.Property<DateTime?>("approvedRejectedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedOnDate");

                    b.Property<byte[]>("changeKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("changeKey");

                    b.Property<string>("deletedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedByIp");

                    b.Property<Guid?>("deletedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedByUserId");

                    b.Property<DateTime?>("deletedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedOnDate");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isActive");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isDeleted");

                    b.Property<string>("lastModifiedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedByIp");

                    b.Property<Guid?>("lastModifiedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedByUserId");

                    b.Property<DateTime?>("lastModifiedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedOnDate");

                    b.HasKey("id");

                    b.HasIndex("isDeleted");

                    b.ToTable("customerPartsHeader");

                    b.HasData(
                        new
                        {
                            id = new Guid("596efbff-8c30-4b75-bfdb-ef7e05b5f96d"),
                            approvedRejectedByIp = "",
                            isActive = true,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.orderParts", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<byte[]>("changeKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("changeKey");

                    b.Property<string>("createdByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("createdByIp");

                    b.Property<Guid>("createdByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdByUserId");

                    b.Property<DateTime>("createdOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdOnDate");

                    b.Property<Guid>("customerPartsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("orderPartsHeaderId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("orderQty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("orderQty");

                    b.Property<decimal?>("orderWt")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("orderWt");

                    b.Property<string>("userfriendlyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("userfriendlyName");

                    b.HasKey("id");

                    b.HasIndex("createdOnDate");

                    b.HasIndex("customerPartsId");

                    b.HasIndex("orderPartsHeaderId");

                    b.HasIndex("orderQty");

                    b.HasIndex("orderWt");

                    b.HasIndex("userfriendlyName");

                    b.ToTable("orderParts");

                    b.HasData(
                        new
                        {
                            id = new Guid("bf4349a0-2cba-4646-baa7-0bafeeba9f8c"),
                            createdByIp = "",
                            createdByUserId = new Guid("31a1793a-9453-48cd-9909-7c157dae6a8a"),
                            createdOnDate = new DateTime(2018, 12, 17, 9, 32, 20, 426, DateTimeKind.Unspecified),
                            customerPartsId = new Guid("bf4349a0-2cba-4646-baa7-0bafeeba9f8c"),
                            orderPartsHeaderId = new Guid("5ab4cb69-7982-44fa-97cd-03e1d386e5e6"),
                            orderQty = 100,
                            orderWt = 2.3m,
                            userfriendlyName = "Order Part 1"
                        });
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.orderPartsHeader", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("approvedRejectedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedByIp");

                    b.Property<Guid?>("approvedRejectedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedByUserId");

                    b.Property<DateTime?>("approvedRejectedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("approvedRejectedOnDate");

                    b.Property<byte[]>("changeKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("changeKey");

                    b.Property<string>("deletedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedByIp");

                    b.Property<Guid?>("deletedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedByUserId");

                    b.Property<DateTime?>("deletedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("deletedOnDate");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isActive");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isDeleted");

                    b.Property<string>("lastModifiedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedByIp");

                    b.Property<Guid?>("lastModifiedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedByUserId");

                    b.Property<DateTime?>("lastModifiedOnDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastModifiedOnDate");

                    b.Property<int>("lineNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lineNumber");

                    b.Property<Guid>("ordersHeaderId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("isDeleted");

                    b.ToTable("orderPartsHeader");

                    b.HasData(
                        new
                        {
                            id = new Guid("5ab4cb69-7982-44fa-97cd-03e1d386e5e6"),
                            approvedRejectedByIp = "",
                            isActive = true,
                            isDeleted = false,
                            lineNumber = 1,
                            ordersHeaderId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.customerParts", b =>
                {
                    b.HasOne("FFM.DataAccessModels.App.customerPartsHeader", "customerPartsHeader")
                        .WithMany("customerParts")
                        .HasForeignKey("customerPartsHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerPartsHeader");
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.orderParts", b =>
                {
                    b.HasOne("FFM.DataAccessModels.App.customerParts", "customerParts")
                        .WithMany()
                        .HasForeignKey("customerPartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FFM.DataAccessModels.App.orderPartsHeader", "orderPartsHeader")
                        .WithMany("orderParts")
                        .HasForeignKey("orderPartsHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerParts");

                    b.Navigation("orderPartsHeader");
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.customerPartsHeader", b =>
                {
                    b.Navigation("customerParts");
                });

            modelBuilder.Entity("FFM.DataAccessModels.App.orderPartsHeader", b =>
                {
                    b.Navigation("orderParts");
                });
#pragma warning restore 612, 618
        }
    }
}
